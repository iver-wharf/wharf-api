// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildServiceClient interface {
	// CreateLogStream allows creating logs as a client-side stream.
	CreateLogStream(ctx context.Context, opts ...grpc.CallOption) (BuildService_CreateLogStreamClient, error)
}

type buildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildServiceClient(cc grpc.ClientConnInterface) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) CreateLogStream(ctx context.Context, opts ...grpc.CallOption) (BuildService_CreateLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BuildService_ServiceDesc.Streams[0], "/BuildService/CreateLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceCreateLogStreamClient{stream}
	return x, nil
}

type BuildService_CreateLogStreamClient interface {
	Send(*CreateLogStreamRequest) error
	CloseAndRecv() (*CreateLogStreamResponse, error)
	grpc.ClientStream
}

type buildServiceCreateLogStreamClient struct {
	grpc.ClientStream
}

func (x *buildServiceCreateLogStreamClient) Send(m *CreateLogStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *buildServiceCreateLogStreamClient) CloseAndRecv() (*CreateLogStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateLogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildServiceServer is the server API for BuildService service.
// All implementations must embed UnimplementedBuildServiceServer
// for forward compatibility
type BuildServiceServer interface {
	// CreateLogStream allows creating logs as a client-side stream.
	CreateLogStream(BuildService_CreateLogStreamServer) error
	mustEmbedUnimplementedBuildServiceServer()
}

// UnimplementedBuildServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildServiceServer struct {
}

func (UnimplementedBuildServiceServer) CreateLogStream(BuildService_CreateLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateLogStream not implemented")
}
func (UnimplementedBuildServiceServer) mustEmbedUnimplementedBuildServiceServer() {}

// UnsafeBuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildServiceServer will
// result in compilation errors.
type UnsafeBuildServiceServer interface {
	mustEmbedUnimplementedBuildServiceServer()
}

func RegisterBuildServiceServer(s grpc.ServiceRegistrar, srv BuildServiceServer) {
	s.RegisterService(&BuildService_ServiceDesc, srv)
}

func _BuildService_CreateLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuildServiceServer).CreateLogStream(&buildServiceCreateLogStreamServer{stream})
}

type BuildService_CreateLogStreamServer interface {
	SendAndClose(*CreateLogStreamResponse) error
	Recv() (*CreateLogStreamRequest, error)
	grpc.ServerStream
}

type buildServiceCreateLogStreamServer struct {
	grpc.ServerStream
}

func (x *buildServiceCreateLogStreamServer) SendAndClose(m *CreateLogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *buildServiceCreateLogStreamServer) Recv() (*CreateLogStreamRequest, error) {
	m := new(CreateLogStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildService_ServiceDesc is the grpc.ServiceDesc for BuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateLogStream",
			Handler:       _BuildService_CreateLogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/wharfapi/v1/buildservice.proto",
}
